def informarEmpresa(elem):
  empresa=Sys.Process("PRG010100").VBObject("frmPRG010100").VBObject("picEmpre").VBObject("txtCodEmp")
  empresa.Keys(elem)
  empresa.Keys("[Enter]")
  Delay(1000)
  
  if Sys.WaitProcess("PRG010100",100).WaitWindow("#32770", "Atenção", 1,100).Exists:
    buttonSim= Sys.Process("PRG010100").Window("#32770", "Atenção", 1).Window("Button", "&Sim", 1)
    buttonSim.clickbutton()
  else: 
    fecharRotina=Sys.Process("PRG010100").VBObject("frmPRG010100")
    fecharRotina.Close()
    Delay(4000) 
    return False
  return True

*********************************************************************************************************
def selecionarPersonalidade(elem):
  
  if elem == "Jurídica":
    personalidadeJuridica=Sys.Process("PRG010100").VBObject("frmPRG010100").Window("ThunderRT6FormDC", "Dados Básicos", 1).Window("ThunderRT6Frame", "Personalidade", 3).Window("ThunderRT6OptionButton", "Jurídica", 2)
    personalidadeJuridica.ClickButton()
  else:
    personalidadeFisica=Sys.Process("PRG010100").VBObject("frmPRG010100").Window("ThunderRT6FormDC", "Dados Básicos", 1).Window("ThunderRT6Frame", "Personalidade", 3).Window("ThunderRT6OptionButton", "Física", 1)
    personalidadeFisica.ClickButton()
***********************************************************************************************************
def clicarAbaClassificacaoTributaria():
  classificasaoTributaria=Sys.Process("PRG010100").VBObject("frmPRG010100").VBObject("frmFolha").VBObject("picESocial").Window("XTPDockingPaneTabbedContainer", "", 1).VBObject("frmESocial").VBObject("fraEfdSocial").VBObject("ctlTabControlOpcoesESocial")
  OCR.Recognize(classificasaoTributaria).BlockByText("Classificação").Click()
***********************************************************************************************************
def aguardarTelaDiagnostico():
  Log.Enabled=False
  while True: 
    if Sys.Process("PRG010900").VBObject("mdiPrincipal").Window("MDIClient", "", 1).VBObject("frmExclusaoEmpresa").VBObject("tabProcessos").VBObject("pbDiagnostico").Value== Sys.Process("PRG010900").VBObject("mdiPrincipal").Window("MDIClient", "", 1).VBObject("frmExclusaoEmpresa").VBObject("tabProcessos").VBObject("pbDiagnostico").Max:
      break
  Log.Enabled=True
*********************************************************************************************************
def status(elem,resultado):
  status= Sys.Process("GpsSst").WinFormsObject("frmCadastroAgenteNocivo").WinFormsObject("tabelControlAgenteNocivo").WinFormsObject("tabPageAgenteNocivo").WinFormsObject("AgenteNocivoInformacaoControl").WinFormsObject("panelFormularioAgenteNocivo").WinFormsObject("cmbStatus")
  status.ClickItem(elem)
  Utilidades.AssertEqual(resultado,status.wText)  
#  Log.Message(status.wText)
  
#def teste():
#  var="clayton"
#  var=var[2:]
#  Log.message(var)
**********************************************************************************************************
def incluirCodigoAgenteNocivo(elem,resultado):
  incluirCodigoAgenteNocivo= Sys.Process("GpsSst").WinFormsObject("frmCadastroAgenteNocivo").WinFormsObject("tabelControlAgenteNocivo").WinFormsObject("tabPageAgenteNocivo").WinFormsObject("AgenteNocivoInformacaoControl").WinFormsObject("panelFormularioAgenteNocivo").WinFormsObject("dPesqAgenteNocivoOficial").WinFormsObject("tableLayoutPanel1").WinFormsObject("txt_search")
  incluirCodigoAgenteNocivo.DblClick()
  incluirCodigoAgenteNocivo.Keys(elem)
  incluirCodigoAgenteNocivo.Keys("[Enter]")
  Utilidades.AssertEqual(resultado,(incluirCodigoAgenteNocivo.wText)[:].replace(" ",""))
**********************************************************************************************************
def clicarExcluiremUsoLote(elem):
  clicarExcluir= Sys.Process("GPSSST").WinFormsObject("frmPrincipal").WinFormsObject("sctMenu").WinFormsObject("SplitterPanel", "", 2).WinFormsObject("ListaAgenteNocivoControl").WinFormsObject("panelCabecalho").WinFormsObject("ListaCabecalhoControl").WinFormsObject("flowLayoutPanelAddRemove").WinFormsObject("btnExcluir")
  clicarExcluir.Click()
  confirma=Sys.Process("GPSSST").Window("#32770", "Atenção", 1).Window("Button", "&Sim", 1)
  confirma.Click()
  validaExcluir= Sys.Process("GPSSST").Window("#32770", "Atenção", 1).Window("Static", "Um ou mais cadastros estão em uso e não foram excluídos.\r\n\r\nEm alternativa a exclusão é possível alterar o campo status para \"inativo\", evitando que sejam utilizados novamente e mantendo seu histórico de utilização.", 2)
  Utilidades.AssertEqual(elem,validaExcluir.WndCaption.replace("\n","").replace("\r",""))
  if Sys.WaitProcess("GPSSST",100).WaitWindow("#32770", "Atenção", 1,100).Exists:
    clickButton=Sys.Process("GPSSST").Window("#32770", "Atenção", 1).Window("Button", "OK", 1)
    clickButton.ClickButton()
************************************************************************************************************
def logLimiteDeTolerancia(resultado):
  logLimiteDeTolerancia= Sys.Process("GpsSst").WinFormsObject("frmCadastroAgenteNocivo").WinFormsObject("tabelControlAgenteNocivo").WinFormsObject("tabPageAgenteNocivo").WinFormsObject("AgenteNocivoInformacaoControl").WinFormsObject("panelFormularioAgenteNocivo").WinFormsObject("txtLimiteTolerancia")  
  Utilidades.AssertEqual(resultado,(logLimiteDeTolerancia.wText)[:].replace(" ",""))
*************************************************************************************************************
def fimExclusaoAgenteNocivo():
  Log.Message("Fim do Processamento Exclusao Agente Nocivo")
************************************************************************************************************
def msgManut():
  while Sys.WaitProcess("ManutInvRdm",1000).WaitWindow("#32770", "Atenção", 1,1000).Exists:
    Delay(1000)
  dat=Sys.Process("ManutInvRdm").Window("#32770", "Atenção", 1).Window("Button", "OK", 1)
  dat.Click()
**************************************************************************************************************
def teste():
  
    
  Project.Variables.teste.Reset()
  while not Project.Variables.teste.IsEOF():     
    if Project.Variables.teste.Value["executar2"] == "x":
    
      
      Page_Tempo_de_Servico.empresa(Project.Variables.teste.Value["Empresa"])  
          

    Project.Variables.teste.Next()

*******************************************************************************************
git branch - verifica qual branch esta
git status - verifica oq temn de novo
git add . - seleciona todas as pendencias
git status - verifica oq tem de novo(verde)
git commit -m "teste"
git push origin dev - sobe para dev
git checkout master - muda branch para master
git merge dev
git add -A(Ou git add .) - seleciona todas as pendencias
git commit -m "teste"

git checkout -b dev (Criar branch localcheckout -b)
git checkout -d dev (deletar branch local)
git push origin :1095(Excluir Branch na nuvem)

git clone --branch dev +url  (Clonar)

git diff (compara as mudanças antesd e comitar)
------------------------------------------------
git stash (deixa em suspenso sua alteração para poder subir outra hora)
git stash apply(Retorna alteração suspensa)
git stash clear(limpa todos stash)
git stash list(lista todos stash)
---------------------------------------------------
git config --global alias.s status(atalhos para comandos mais usados)

git tag -a 1.0.0 -m "teste"
git tag
git push origin master --tags
git tag -d 1.0.0 (apaga tag local)
git push origin :1.0.0
------------------------------------
Para remover uma branch (ramo) local no Git, basta rodar o seguinte comando(Não pode estar na branch que deseja excluir:
git branch -d nome-da-branch
git branch -D nome-da-branch
(Nos comandos acima, -d é um comando para --delete e -D é um comando para --delete --force.)
Remover branch na nuvem
git push origin --delete nome-da-branch
git push origin :nome-da-branch
-------------------------------------

****************************************************************************
Retira todos os espaços da frente e costa
Utilidades.AssertEqual(param1 ,(validaNome._Default.strip()))

****************************************************************************
def test():
  s= "teste = 2"
  pos = s.rfind('=')
  Log.Message(s[pos+1:].strip())
